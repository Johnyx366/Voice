#!/usr/bin/env python3
"""
Script mejorado para firmar digitalmente el ejecutable de Voice Extractor
Usa certificado autofirmado creado autom√°ticamente
"""

import os
import sys
import subprocess
from pathlib import Path

def find_signtool():
    """Busca signtool.exe en las ubicaciones comunes del Windows SDK"""
    common_paths = [
        r"C:\Program Files (x86)\Windows Kits\10\bin\10.0.22621.0\x64\signtool.exe",
        r"C:\Program Files (x86)\Windows Kits\10\bin\10.0.19041.0\x64\signtool.exe",
        r"C:\Program Files (x86)\Windows Kits\10\bin\x64\signtool.exe",
        r"C:\Program Files (x86)\Microsoft SDKs\Windows\v7.1A\Bin\signtool.exe",
    ]
    
    # Buscar en todas las versiones disponibles
    kits_path = Path(r"C:\Program Files (x86)\Windows Kits\10\bin")
    if kits_path.exists():
        for version_dir in kits_path.iterdir():
            if version_dir.is_dir():
                signtool_path = version_dir / "x64" / "signtool.exe"
                if signtool_path.exists():
                    return str(signtool_path)
    
    for path in common_paths:
        if os.path.exists(path):
            return path
    
    return None

def install_windows_sdk():
    """Instala Windows SDK autom√°ticamente si no est√° disponible"""
    print("üì¶ Windows SDK no encontrado. Instalando autom√°ticamente...")
    
    install_script = '''
    Write-Host "üîß Descargando Windows SDK..."
    $url = "https://go.microsoft.com/fwlink/?linkid=2196127"
    $output = "$env:TEMP\\winsdksetup.exe"
    
    try {
        Invoke-WebRequest -Uri $url -OutFile $output -UseBasicParsing
        Write-Host "‚úÖ Descarga completada"
        
        Write-Host "üîß Instalando Windows SDK (herramientas de firma)..."
        Start-Process -FilePath $output -ArgumentList "/quiet", "/features", "OptionId.SigningTools" -Wait
        Write-Host "‚úÖ Windows SDK instalado"
        
        Remove-Item $output -Force -ErrorAction SilentlyContinue
    } catch {
        Write-Host "‚ùå Error: $_"
        Write-Host "üí° Instala manualmente desde: https://developer.microsoft.com/windows/downloads/windows-sdk/"
        exit 1
    }
    '''
    
    try:
        subprocess.run(['powershell', '-ExecutionPolicy', 'Bypass', '-Command', install_script], 
                       check=True, shell=True)
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Error instalando Windows SDK: {e}")
        return False

def sign_with_certificate():
    """Firma el ejecutable usando el certificado autofirmado"""
    exe_path = "dist/VoiceExtractor/VoiceExtractor.exe"
    cert_path = "certificates/VoiceExtractor_Certificate.pfx"
    cert_password = "VoiceExtractor2024!"
    
    # Verificar que el ejecutable existe
    if not os.path.exists(exe_path):
        print("‚ùå Ejecutable no encontrado. Ejecuta build_exe.py primero")
        return False
    
    # Verificar que el certificado existe
    if not os.path.exists(cert_path):
        print("‚ùå Certificado no encontrado. Ejecuta create_certificate.bat primero")
        return False
    
    # Buscar signtool
    signtool_path = find_signtool()
    if not signtool_path:
        print("üîç SignTool no encontrado, intentando instalar Windows SDK...")
        if not install_windows_sdk():
            return False
        
        # Buscar de nuevo despu√©s de la instalaci√≥n
        signtool_path = find_signtool()
        if not signtool_path:
            print("‚ùå No se pudo encontrar SignTool despu√©s de la instalaci√≥n")
            return False
    
    print(f"üîß Usando SignTool: {signtool_path}")
    
    # Comando para firmar
    cmd = [
        signtool_path,
        'sign',
        '/f', cert_path,                           # Archivo de certificado
        '/p', cert_password,                       # Contrase√±a del certificado
        '/fd', 'SHA256',                          # Algoritmo de hash
        '/tr', 'http://timestamp.digicert.com',   # Servidor de timestamp
        '/td', 'SHA256',                          # Algoritmo de timestamp
        '/d', 'Voice Extractor - Whisper AI',    # Descripci√≥n
        '/du', 'https://github.com/voice-extractor', # URL del proyecto
        exe_path
    ]
    
    try:
        print("‚úçÔ∏è  Firmando ejecutable...")
        result = subprocess.run(cmd, capture_output=True, text=True)
        
        if result.returncode == 0:
            print("‚úÖ Ejecutable firmado exitosamente!")
            print("üîí El ejecutable ahora est√° firmado digitalmente")
            return True
        else:
            print(f"‚ùå Error firmando ejecutable:")
            print(result.stderr)
            # Intentar sin timestamp si falla
            return sign_without_timestamp(signtool_path, cert_path, cert_password, exe_path)
            
    except Exception as e:
        print(f"‚ùå Error ejecutando SignTool: {e}")
        return False

def sign_without_timestamp(signtool_path, cert_path, cert_password, exe_path):
    """Intenta firmar sin timestamp como respaldo"""
    print("üîÑ Intentando firmar sin timestamp...")
    
    cmd = [
        signtool_path,
        'sign',
        '/f', cert_path,
        '/p', cert_password,
        '/fd', 'SHA256',
        '/d', 'Voice Extractor - Whisper AI',
        exe_path
    ]
    
    try:
        result = subprocess.run(cmd, capture_output=True, text=True)
        
        if result.returncode == 0:
            print("‚úÖ Ejecutable firmado exitosamente (sin timestamp)!")
            return True
        else:
            print(f"‚ùå Error firmando sin timestamp:")
            print(result.stderr)
            return False
            
    except Exception as e:
        print(f"‚ùå Error en firma sin timestamp: {e}")
        return False

def verify_signature():
    """Verifica que la firma sea v√°lida"""
    exe_path = "dist/VoiceExtractor/VoiceExtractor.exe"
    
    signtool_path = find_signtool()
    if not signtool_path:
        print("‚ö†Ô∏è  No se puede verificar firma: SignTool no disponible")
        return False
    
    cmd = [signtool_path, 'verify', '/pa', exe_path]
    
    try:
        result = subprocess.run(cmd, capture_output=True, text=True)
        
        if result.returncode == 0:
            print("‚úÖ Firma verificada correctamente")
            return True
        else:
            print("‚ö†Ô∏è  Advertencia en verificaci√≥n de firma:")
            print(result.stdout)
            return False
            
    except Exception as e:
        print(f"‚ùå Error verificando firma: {e}")
        return False

def main():
    """Funci√≥n principal"""
    print("üîê Voice Extractor - Firmado Digital")
    print("=" * 45)
    
    # Verificar prerrequisitos
    if not os.path.exists("certificates"):
        print("‚ùå Directorio de certificados no encontrado")
        print("üí° Ejecuta create_certificate.bat primero")
        return
    
    # Firmar ejecutable
    if sign_with_certificate():
        print("\nüéâ ¬°Proceso de firmado completado exitosamente!")
        
        # Verificar firma
        print("\nüîç Verificando firma...")
        verify_signature()
        
        print("\nüìã Resumen:")
        print("   ‚úÖ Ejecutable firmado digitalmente")
        print("   üîí Certificado autofirmado aplicado")
        print("   ‚ö†Ô∏è  Windows puede mostrar advertencia de 'Editor desconocido'")
        print("   üí° Para producci√≥n, usa certificado de una CA confiable")
        
    else:
        print("\n‚ùå Error en el proceso de firmado")
        print("üí° Verifica que:")
        print("   - El ejecutable existe en dist/VoiceExtractor/")
        print("   - El certificado existe en certificates/")
        print("   - Windows SDK est√° instalado")

if __name__ == "__main__":
    main()
